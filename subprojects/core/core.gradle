/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java-library'
}
apply from: "$rootDir/gradle/taskProperties.gradle"

sourceCompatibility = javaVersion.java9Compatible ? 1.6 : 1.5

configurations {
    reports
}

classpathManifest {
    optionalProjects = ['gradle-kotlin-dsl']
}

dependencies {
    api project(":baseServices")
    api project(":baseServicesGroovy")
    api project(":messaging")
    api project(":logging")
    api project(":resources")
    api project(":cli")
    api project(":buildOption")
    api project(":native")
    api project(":persistentCache")
    api project(":buildCache")
    api project(":coreApi")

    api project(":processServices")
    api project(":jvmServices")
    api project(":modelCore")
    api libraries.groovy
    api libraries.ant
    api libraries.guava
    api libraries.inject

    implementation project(":modelGroovy")
    implementation libraries.asm
    implementation libraries.asm_commons
    implementation libraries.slf4j_api
    implementation libraries.commons_collections
    implementation libraries.commons_io
    implementation libraries.commons_lang
    implementation libraries.jcip
    implementation libraries.nativePlatform
    implementation libraries.commons_compress
    implementation libraries.xmlApis

    runtimeOnly project(":docs")

    testImplementation libraries.jsoup
    testImplementation libraries.log4j_to_slf4j

    testRuntimeOnly libraries.xerces
    testRuntimeOnly project(":diagnostics")
    testRuntimeOnly project(":compositeBuilds")

    testFixturesImplementation project(":internalTesting")
    testFixturesImplementation libraries.ivy

    testFixturesRuntime project(':workers')
    testFixturesRuntime project(':dependencyManagement')
    testFixturesRuntime project(':pluginUse')
    testFixturesRuntime project(':runtimeApiInfo')
    testFixturesRuntime project(':testingJunitPlatform')

    integTestImplementation project(":internalIntegTesting")

    integTestRuntimeOnly project(":plugins")
    integTestRuntimeOnly project(':maven')
}

useTestFixtures()
useTestFixtures(project: ":coreApi")
useTestFixtures(project: ":messaging")
useTestFixtures(project: ":modelCore")
useTestFixtures(project: ":logging")
useTestFixtures(project: ":baseServices")

test {
    forkEvery = 200
}

[compileGroovy, compileTestGroovy]*.groovyOptions*.fork(memoryInitialSize: '128M', memoryMaximumSize: '1G')

task pluginsManifest(type: WriteProperties) {
    property("plugins") {
        project.pluginProjects.collect { it.archivesBaseName }.sort().join(',')
    }
    outputFile = new File(project.generatedResourcesDir, "gradle-plugins.properties")
}

sourceSets.main.output.dir generatedResourcesDir, builtBy: pluginsManifest

task implementationPluginsManifest(type: WriteProperties) {
    property("plugins") {
        project.implementationPluginProjects.collect { it.archivesBaseName }.sort().join(',')
    }
    outputFile = new File(project.generatedResourcesDir, "gradle-implementation-plugins.properties")
}

sourceSets.main.output.dir generatedResourcesDir, builtBy: implementationPluginsManifest

verifyTestFilesCleanup.errorWhenNotEmpty = false
