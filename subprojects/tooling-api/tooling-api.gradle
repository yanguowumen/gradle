import org.gradle.ShadedJar

// GradleConnector entry point requires Java 5
sourceCompatibility = javaVersion.java9Compatible ? 1.6 : 1.5

configurations {
    testPublishRuntime
}

dependencies {
    compile project(':core')
    compile project(':messaging')
    compile project(':wrapper')
    compile project(':baseServices')
    publishCompile "${libraries.slf4j_api}:1.7.16"
    compile libraries.jcip

    testFixturesCompile project(':baseServicesGroovy')
    testFixturesCompile project(':internalIntegTesting')

    integTestRuntime project(":toolingApiBuilders")
    integTestRuntime project(":ivy")

    crossVersionTestRuntime "org.gradle:gradle-kotlin-dsl:${versions.gradle_kotlin_dsl}"
    crossVersionTestRuntime project(':buildComparison')
    crossVersionTestRuntime project(":ivy")
    crossVersionTestRuntime project(":maven")
}

useTestFixtures()
useTestFixtures(project: ":logging")
useTestFixtures(project: ':dependencyManagement')
useTestFixtures(project: ':ide')

task shadedJarWithoutVersion(type: ShadedJar) {
    ext.outputDir = file("$buildDir/shaded-jar-without-version")
    sourceFiles = jar.outputs.files +
        files { configurations.runtime - configurations.publishCompile }
    analysisFile = file("$outputDir/analysis.txt")
    classesDir = file("$outputDir/classes")
    jarFile = file("$outputDir/gradle-tooling-api-shaded-${baseVersion}.jar")
    keepPackages = ["org.gradle.tooling"]
    unshadedPackages = ["org.gradle", "org.slf4j", "sun.misc"]
    ignorePackages = ["org.gradle.tooling.provider.model"]
    shadowPackage = "org.gradle.internal.impldep"
}

task toolingApiShadedJar(type: Zip) {
    ext.buildReceipt = tasks.getByPath(':createBuildReceipt')
    destinationDir file("$buildDir/shaded-jar")
    dependsOn shadedJarWithoutVersion, buildReceipt
    from zipTree(shadedJarWithoutVersion.jarFile)
    baseName = 'gradle-tooling-api-shaded'
    from(buildReceipt) {
        into '/org/gradle'
    }
    extension 'jar'
    version baseVersion
}

apply from: 'buildship.gradle'

sourceJar {
    configurations.compile.allDependencies.withType(ProjectDependency).each {
        from it.dependencyProject.sourceSets.main.groovy.srcDirs
        from it.dependencyProject.sourceSets.main.java.srcDirs
    }
}

eclipse {
    classpath {
        file.whenMerged { classpath ->
            //**TODO
            classpath.entries.removeAll { it.path.contains('src/test/groovy') }
            classpath.entries.removeAll { it.path.contains('src/integTest/groovy') }
        }
    }
}

artifacts {
    publishRuntime file: toolingApiShadedJar.archivePath, name: archivesBaseName, type: 'jar', builtBy: toolingApiShadedJar
}

task publishLocalArchives(type: Upload) {
    ext.repoBaseDir = rootProject.file('build/repo')
    configuration = configurations.publishRuntime
    uploadDescriptor = false
    repositories {
        ivy {
            artifactPattern "${repoBaseDir}/${project.group.replaceAll('\\.', '/')}/${archivesBaseName}/[revision]/[artifact]-[revision](-[classifier]).[ext]"
        }
    }

    doFirst {
        if (repoBaseDir.exists()) {
            // Make sure tooling API artifacts do not pile up
            repoBaseDir.deleteDir()
        }
    }
}

integTestTasks.all {
    requiresBinZip = true
    requiresLibsRepo = true
}

verifyTestFilesCleanup.errorWhenNotEmpty = false

