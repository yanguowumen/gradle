/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {
    versions = [:]
    libraries = [:]
}

versions.gradle_kotlin_dsl = '0.15.3'

libraries.ant =                 'org.apache.ant:ant'
libraries.asm =                 'org.ow2.asm:asm'
libraries.asm_commons =         'org.ow2.asm:asm-commons'
libraries.asm_tree =            'org.ow2.asm:asm-tree'
libraries.asm_util =            'org.ow2.asm:asm-util'
libraries.awsS3 = [             'com.amazonaws:aws-java-sdk-core',
                                'com.amazonaws:aws-java-sdk-s3',
                                'com.amazonaws:aws-java-sdk-kms']
libraries.bouncycastle_provider = 'org.bouncycastle:bcprov-jdk15on'
libraries.bouncycastle_pgp =    'org.bouncycastle:bcpg-jdk15on'
libraries.bndlib =              'biz.aQute.bnd:biz.aQute.bndlib'
libraries.bsh =                 'org.apache-extras.beanshell:bsh'
libraries.commons_cli =         'commons-cli:commons-cli'
libraries.commons_codec =       'commons-codec:commons-codec'
libraries.commons_collections = 'commons-collections:commons-collections'
libraries.commons_compress =    'org.apache.commons:commons-compress'
libraries.commons_httpclient =  'org.apache.httpcomponents:httpclient'
libraries.commons_io =          'commons-io:commons-io'
libraries.commons_lang =        'commons-lang:commons-lang'
libraries.fastutil =            'it.unimi.dsi:fastutil'
libraries.gcs =                 'com.google.apis:google-api-services-storage'
libraries.groovy =              'org.codehaus.groovy:groovy-all'
libraries.gson =                'com.google.code.gson:gson'
libraries.guava =               'com.google.guava:guava-jdk5'
libraries.inject =              'javax.inject:javax.inject'
libraries.jackson = [           'com.fasterxml.jackson.core:jackson-core',
                                'com.fasterxml.jackson.core:jackson-annotations',
                                'com.fasterxml.jackson.core:jackson-databind']
libraries.jansi =               'org.fusesource.jansi:jansi'
libraries.jcip =                'net.jcip:jcip-annotations'
libraries.jsr305 =              'com.google.code.findbugs:jsr305'
libraries.kryo =                'com.esotericsoftware.kryo:kryo'
libraries.maven3 =              'org.apache.maven:maven-core'
libraries.nativePlatform =      'net.rubygrapefruit:native-platform'
libraries.nekohtml =            'net.sourceforge.nekohtml:nekohtml'
libraries.objenesis =           'org.objenesis:objenesis'
libraries.plist =               'com.googlecode.plist:dd-plist' // for XCode IDE integration support
libraries.rhino =               'org.mozilla:rhino'
libraries.simple =              'org.simpleframework:simple'
libraries.testng =              'org.testng:testng'
libraries.ivy =                 'org.apache.ivy:ivy'
libraries.jatl =                'com.googlecode.jatl:jatl'
libraries.jcifs =               'org.samba.jcifs:jcifs'
libraries.jgit =                'org.eclipse.jgit:org.eclipse.jgit'
libraries.joda =                'joda-time:joda-time'
libraries.jsch =                'com.jcraft:jsch'
libraries.junit =               'junit:junit'
libraries.xerces =              'xerces:xercesImpl'
libraries.xmlApis =             'xml-apis:xml-apis'

// Logging
libraries.slf4j_api =           'org.slf4j:slf4j-api'
libraries.jcl_to_slf4j =        'org.slf4j:jcl-over-slf4j'
libraries.jul_to_slf4j =        'org.slf4j:jul-to-slf4j'
libraries.log4j_to_slf4j =      'org.slf4j:log4j-over-slf4j'

// Test classpath libraries
libraries.spock =   'org.spockframework:spock-core:1.0-groovy-2.4'
libraries.jsoup =   'org.jsoup:jsoup:1.6.3'
libraries.xmlunit = 'xmlunit:xmlunit:1.3'
libraries.jetty =   'org.mortbay.jetty:jetty:6.1.26'
libraries.sshd =    'org.apache.sshd:sshd-core:1.2.0'
libraries.jmock = [
    'org.hamcrest:hamcrest-core',
    'org.hamcrest:hamcrest-library:1.3',
    'org.jmock:jmock:2.5.1',
    'org.jmock:jmock-junit4:2.5.1',
    'org.jmock:jmock-legacy:2.5.1'
]

allprojects {
    configurations.whenObjectAdded {
        if (name == 'compile') {
            dependencies {
                constraints {
                    compile('org.jetbrains:annotations') { version { strictly '13.0' } }
                    compile('org.apache.ant:ant') { version { strictly '1.9.9' } }
                    compile('org.apache.ant:ant-launcher') { version { strictly '1.9.9' } }
                    compile('org.ow2.asm:asm') { version { strictly '6.0' } }
                    compile('org.ow2.asm:asm-commons') { version { strictly '6.0' } }
                    compile('org.ow2.asm:asm-tree') { version { strictly '6.0' } }
                    compile('commons-collections:commons-collections') { version { strictly '3.2.2' } }
                    compile('org.apache.commons:commons-compress') { version { strictly '1.14' } }
                    compile('commons-io:commons-io') { version { strictly '2.4' } }
                    compile('commons-lang:commons-lang:') { version { strictly '2.6' } }
                    compile('it.unimi.dsi:fastutil') { version { strictly '7.2.1' } }
                    compile('org.codehaus.groovy:groovy-all') { version { strictly '2.4.12' } }
                    compile('com.google.guava:guava-jdk5') { version { strictly '17.0' } }
                    compile('org.fusesource.jansi:jansi') { version { strictly '1.14' } }
                    compile('javax.inject:javax.inject') { version { strictly '1' } }
                    compile('net.jcip:jcip-annotations') { version { strictly '1.0' } }
                    compile('com.google.code.findbugs:jsr305') { version { strictly '2.0.1' } }
                    compile('com.esotericsoftware.kryo:kryo') { version { strictly '2.20' } }
                    compile('com.esotericsoftware.minlog:minlog') { version { strictly '1.2' } }
                    compile('net.rubygrapefruit:native-platform') { version { strictly '0.14' } }
                    compile('org.objenesis:objenesis') { version { strictly '1.2' } }
                    compile('org.slf4j:jcl-over-slf4j') { version { strictly '1.7.10' } }
                    compile('org.slf4j:jul-to-slf4j') { version { strictly '1.7.10' } }
                    compile('org.slf4j:log4j-over-slf4j') { version { strictly '1.7.16' } }
                    compile('xml-apis:xml-apis') { version { strictly '1.4.01'}; because 'Do not upgrade to 2.0.x, which has a POM with relocation Gradle does not handle well' }
                    compile('org.slf4j:slf4j-api') { version { strictly '1.7.16' } }

                    compile('org.sonatype.aether:aether-api') { version { strictly '1.13.1' } }
                    compile('org.sonatype.aether:aether-connector-wagon') { version { strictly '1.13.1' } }
                    compile('org.sonatype.aether:aether-impl') { version { strictly '1.13.1' } }
                    compile('org.sonatype.aether:aether-spi') { version { strictly '1.13.1' } }
                    compile('org.sonatype.aether:aether-util') { version { strictly '1.13.1' } }
                    compile('org.ow2.asm:asm-util') { version { strictly '6.0' } }
                    compile('com.amazonaws:aws-java-sdk-core') { version { strictly '1.11.6' } }
                    compile('com.amazonaws:aws-java-sdk-kms') { version { strictly '1.11.6' } }
                    compile('com.amazonaws:aws-java-sdk-s3') { version { strictly '1.11.6' } }
                    compile('org.bouncycastle:bcprov-jdk15on') { version { strictly '1.58' } }
                    compile('org.bouncycastle:bcpg-jdk15on') { version { strictly '1.58' } }
                    compile('biz.aQute.bnd:biz.aQute.bndlib') { version { strictly '3.4.0' } }
                    compile('org.apache-extras.beanshell:bsh') { version { strictly '2.0b6' } }
                    compile('commons-cli:commons-cli') { version { strictly '1.2' } }
                    compile('commons-codec:commons-codec') { version { strictly '1.9' } }
                    compile('com.googlecode.plist:dd-plist') { version { strictly '1.20' } }
                    compile('com.google.api-client:google-api-client') { version { strictly '1.23.0' } }
                    compile('com.google.apis:google-api-services-storage') { version { strictly 'v1-rev116-1.23.0' } }
                    compile('com.google.http-client:google-http-client') { version { strictly '1.23.0' } }
                    compile('com.google.http-client:google-http-client-jackson2') { version { strictly '1.23.0' } }
                    compile('com.google.oauth-client:google-oauth-client') { version { strictly '1.23.0' } }
                    compile('com.google.code.gson:gson') { version { strictly '2.7' } }
                    compile('org.hamcrest:hamcrest-core') { version { strictly '1.3' } }
                    compile('org.apache.httpcomponents:httpclient') { version { strictly '4.5.2' } }
                    compile('org.apache.httpcomponents:httpcore') { version { strictly '4.4.4' } }
                    compile('org.apache.ivy:ivy') { version { strictly '2.2.0' } }
                    compile('com.fasterxml.jackson.core:jackson-annotations') { version { strictly '2.8.11' } }
                    compile('com.fasterxml.jackson.core:jackson-core') { version { strictly '2.8.11' } }
                    compile('com.fasterxml.jackson.core:jackson-databind') { version { strictly '2.8.11' } }
                    compile('com.googlecode.jatl:jatl') { version { strictly '0.2.2' } }
                    compile('org.samba.jcifs:jcifs') { version { strictly '1.3.17' } }
                    compile('com.beust:jcommander') { version { strictly '1.47' } }
                    compile('com.googlecode.jatl:jatl') { version { strictly '0.2.2' } }
                    compile('joda-time:joda-time') { version { strictly '2.8.2' } }
                    compile('com.jcraft:jsch') { version { strictly '0.1.54' } }
                    compile('junit:junit') { version { strictly '4.12' } }
                    compile('org.apache.maven:maven-aether-provider') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-artifact') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-compat') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-core') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-model') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-model-builder') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-plugin-api') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-repository-metadata') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-settings') { version { strictly '3.0.4' } }
                    compile('org.apache.maven:maven-settings-builder') { version { strictly '3.0.4' } }
                    compile('net.sourceforge.nekohtml:nekohtml') { version { strictly '1.9.20' } }
                    compile('org.eclipse.jgit:org.eclipse.jgit') { version { strictly '4.5.3.201708160445-r' }; because '4.6+ requires Java 8' }
                    compile('org.sonatype.plexus:plexus-cipher') { version { strictly '1.7' } }
                    compile('org.codehaus.plexus:plexus-classworlds') { version { strictly '2.4' } }
                    compile('org.codehaus.plexus:plexus-component-annotations') { version { strictly '1.5.5' } }
                    compile('org.codehaus.plexus:plexus-container-default') { version { strictly '1.5.5' } }
                    compile('org.codehaus.plexus:plexus-interpolation') { version { strictly '1.14' } }
                    compile('org.codehaus.plexus:plexus-sec-dispatcher') { version { strictly '1.3' } }
                    compile('org.codehaus.plexus:plexus-utils') { version { strictly '3.0.8' } }
                    compile('org.sonatype.pmaven:pmaven-common') { version { strictly '0.8-20100325' } }
                    compile('org.sonatype.pmaven:pmaven-groovy') { version { strictly '0.8-20100325' } }
                    compile('org.mozilla:rhino') { version { strictly '1.7R3' } }
                    compile('org.simpleframework:simple') { version { strictly '4.1.21' } }
                    compile('org.testng:testng') { version { strictly '6.3.1' } }
                    compile('org.yaml:snakeyaml:1.6') { version { strictly '1.6' } } //added by testng, could be avoided with newer TestNG version
                    compile('org.apache.maven.wagon:wagon-file') { version { strictly '2.4' } }
                    compile('org.apache.maven.wagon:wagon-http') { version { strictly '2.4' } }
                    compile('org.apache.maven.wagon:wagon-http-shared4') { version { strictly '2.4' } }
                    compile('org.apache.maven.wagon:wagon-provider-api') { version { strictly '2.4' } }
                    compile('org.apache.xbean:xbean-reflect') { version { strictly '3.4' } }
                    compile('xerces:xercesImpl') { version { strictly '2.11.0' } }

                    // Add constraints for Kotlin here

                    // Reject dependencies we do not want completely
                    compile('com.google.collections:google-collections') {
                        version { rejectAll() }
                        because 'Guava replaces google collections'
                    }
                    compile('junit:junit-dep') {
                        version { rejectAll() }
                        because 'junit:junit has replaced junit:junit-dep'
                    }
                    compile('commons-logging:commons-logging') {
                        version { rejectAll() }
                        because 'We do not want non-slf4j logging compiles on the classpath'
                    }
                    compile('org.sonatype.sisu:sisu-inject-plexus') {
                        version { rejectAll() }
                        because 'We do not wand this dependency injection on the classpath'
                    }
                }
            }
        }

        if (name == 'testImplementation') {
            dependencies {
                constraints {
                    testImplementation('cglib:cglib-nodep') {
                        version { prefer '3.2.5' }
                        because 'We need to make sure we upgrade to Java8 compatible version'
                    }
                }
            }
        }
    }

    dependencies {
        components { handler ->
            // Gradle distribution - minify: remove unused transitive dependencies
            withModule('org.apache.maven:maven-core') {
                allVariants {
                    withDependencies {
                        it.removeAll {
                            it.name != 'maven-settings-builder' &&
                                it.name != 'maven-model' &&
                                it.name != 'maven-model-builder' &&
                                it.name != 'maven-artifact' &&
                                it.name != 'maven-aether-provider' &&
                                it.group != 'org.sonatype.aether'
                        }
                    }
                }
            }
            withModule('com.amazonaws:aws-java-sdk-core') {
                allVariants {
                    withDependencies { it.removeAll { it.name == 'jackson-dataformat-cbor' } }
                }
            }
            withModule('org.eclipse.jgit:org.eclipse.jgit') {
                allVariants {
                    withDependencies { it.removeAll { it.group == 'com.googlecode.javaewah' }}
                }
            }
            withModule('org.apache.maven.wagon:wagon-http-shared4') {
                allVariants {
                    withDependencies { it.removeAll { it.group == 'org.jsoup' }}
                }
            }
            withModule('org.sonatype.aether:aether-connector-wagon') {
                allVariants {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' } }
                }
            }
            withModule('org.apache.maven:maven-compat') {
                allVariants {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' } }
                }
            }
            withModule('org.apache.maven:maven-plugin-api') {
                allVariants {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' } }
                }
            }

            // Gradle distribution - replace with newer alternatives to use only one
            withModule('org.codehaus.plexus:plexus-container-default') {
                allVariants {
                    withDependencies {
                        it.removeAll { it.group == 'com.google.collections' }
                        it.add('com.google.guava:guava-jdk5:17.0') {
                            because 'Guava replaces google collections'
                        }
                    }
                }
            }
            withModule('org.jmock:jmock-junit4') {
                allVariants {
                    withDependencies {
                        it.removeAll { it.group == 'junit' }
                        it.add('junit:junit:4.12') {
                            because 'junit:junit replaced junit:junit-dep'
                        }
                    }
                }
            }
            withModule('org.testng:testng') {
                allVariants {
                    withDependencies {
                        it.removeAll { it.group == 'org.beanshell' }
                        it.add('org.apache-extras.beanshell:bsh:2.0b6') {
                            because 'org.apache-extras.beanshell:bsh replaced junit:junit-dep'
                        }
                    }
                }
            }

            replaceLog4JWithAdapter(handler, 'org.apache.xbean:xbean-reflect')

            replaceJCLWithAdapter(handler, 'org.apache.xbean:xbean-reflect')
            replaceJCLWithAdapter(handler, 'org.apache.httpcomponents:httpclient')
            replaceJCLWithAdapter(handler, 'com.amazonaws:aws-java-sdk-core')
            replaceJCLWithAdapter(handler, 'org.apache.httpcomponents:httpmime')
            replaceJCLWithAdapter(handler, 'net.sourceforge.htmlunit:htmlunit')
            replaceJCLWithAdapter(handler, 'org.apache.maven.wagon:wagon-http')
            replaceJCLWithAdapter(handler, 'org.apache.maven.wagon:wagon-http-shared4')

            replaceJCLConstraintWithAdapter(handler, 'org.codehaus.groovy:groovy-all')

            //TODO check if we can upgrade the following dependencies and remove the rules
            withModule('org.codehaus.groovy:groovy-all') {
                allVariants {
                    withDependencyConstraints {
                        it.findAll { it.group == 'org.apache.ivy' }.each {
                            it.version { prefer '2.2.0' }
                            it.because 'Gradle depends on ivy implementation details which changed with newer versions'
                        }
                        it.findAll { it.group == 'org.testng' }.each {
                            it.version { prefer '6.3.1' }
                            it.because '6.3.1 is required by Gradle and part of the distribution'
                        }
                    }
                }
            }
            withModule('jaxen:jaxen') {
                allVariants {
                    withDependencies {
                        it.findAll { it.group == 'xml-apis' }.each {
                            it.version { prefer '1.4.01' }
                            it.because 'Gradle has trouble with the versioning scheme and pom redirects in higher versions'
                        }
                    }
                }
            }
            withModule('jdom:jdom') {
                allVariants {
                    withDependencies {
                        it.findAll { it.group == 'xml-apis' }.each {
                            it.version { prefer '1.4.01' }
                            it.because 'Gradle has trouble with the versioning scheme and pom redirects in higher versions'
                        }
                    }
                }
            }
            withModule('xalan:xalan') {
                allVariants {
                    withDependencies {
                        it.findAll { it.group == 'xml-apis' }.each {
                            it.version { prefer '1.4.01' }
                            it.because 'Gradle has trouble with the versioning scheme and pom redirects in higher versions'
                        }
                    }
                }
            }

            // Test classpath
            withModule('org.spockframework:spock-core') {
                allVariants {
                    withDependencyConstraints {
                        it.findAll { it.group == 'org.objenesis' }.each {
                            it.version { prefer '1.2' }
                            it.because '1.2 is required by Gradle and part of the distribution'
                        }
                    }
                }
            }
        }
    }
}

def replaceJCLWithAdapter(ComponentMetadataHandler handler, String module) {
    handler.withModule(module) {
        allVariants {
            withDependencies {
                it.removeAll { it.group == 'commons-logging' }
                it.add ('org.slf4j:jcl-over-slf4j:1.7.10') {
                    because 'We do not want non-slf4j logging implementations on the classpath'
                }
            }
        }
    }
}

def replaceJCLConstraintWithAdapter(ComponentMetadataHandler handler, String module) {
    handler.withModule(module) {
        allVariants {
            withDependencyConstraints {
                it.removeAll { it.group == 'commons-logging' }
                it.add ('org.slf4j:jcl-over-slf4j:1.7.10') {
                    because 'We do not want non-slf4j logging implementations on the classpath'
                }
            }
        }
    }
}

def replaceLog4JWithAdapter(ComponentMetadataHandler handler, String module) {
    handler.withModule(module) {
        allVariants {
            withDependencies {
                it.removeAll { it.group == 'log4j' }
                it.add ('org.slf4j:log4j-over-slf4j:1.7.16') {
                    because 'We do not want non-slf4j logging implementations on the classpath'
                }
            }
        }
    }
}

/*allprojects { currentProject ->   ''
    dependencies {
        components {
            withModule('org.apache.ivy:ivy') {
                withVariant('default') {
                    withDependencies {
                        add('com.jcraft:jsch:0.1.54') //is declared, but optional
                    }
                }
            }
            withModule('org.apache.maven:maven-core') {
                withVariant('default') {
                    withDependencies {
                        it.removeAll { it.group == 'org.sonatype.sisu' }
                        add("org.apache.maven:maven-compat:${versions.maven}")
                        add('org.apache.maven.wagon:wagon-file:2.4')
                        add('org.apache.maven.wagon:wagon-http:2.4')
                        add('org.apache.maven.wagon:wagon-provider-api:2.4')
                        add('org.apache.maven.wagon:wagon-http-shared4:2.4')
                        add('org.codehaus.plexus:plexus-container-default:1.5.5')
                        add('org.sonatype.aether:aether-connector-wagon:1.13.1')
                        add('org.sonatype.plexus:plexus-cipher:1.7')
                    }
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
            }
            withModule('org.apache.maven.wagon:wagon-provider-api') {
                withVariant('default') {
                    withDependencies { it.findAll { it.name == 'plexus-utils' }.each { changeVersionInMetadata it, '2.1' }}
                }
                withVariant('runtime') {
                    withDependencies { it.findAll { it.name == 'plexus-utils' }.each { changeVersionInMetadata it, '2.1' }}
                }
            }
            withModule('org.apache.xbean:xbean-reflect') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'commons-logging' || it.group == 'log4j' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'commons-logging' || it.group == 'log4j' }}
                }
            }
            withModule('org.codehaus.plexus:plexus-container-default') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'com.google.collections' || it.group == 'junit' || it.group == 'org.apache.xbean' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'com.google.collections' || it.group == 'junit' || it.group == 'org.apache.xbean' }}
                }
            }
            withModule('org.sonatype.aether:aether-connector-wagon') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
            }
            withModule('org.apache.maven:maven-compat') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
            }
            withModule('org.apache.maven:maven-plugin-api') {
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
            }
            withModule('org.apache.maven.wagon:wagon-http') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'org.apache.httpcomponents' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.apache.httpcomponents' }}
                }
            }
            withModule('org.apache.maven.wagon:wagon-http-shared4') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'org.jsoup' || it.group == 'commons-logging' || it.group == 'org.apache.httpcomponents' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.jsoup' || it.group == 'commons-logging' || it.group == 'org.apache.httpcomponents' }}
                }
            }
            withModule('net.sourceforge.nekohtml:nekohtml') {
                withVariant('default') {
                    withDependencies {
                        it.findAll { it.group == 'xerces' }.each {
                            changeVersionInMetadata it, '2.11.0'
                        }
                    }
                }
            }
            withModule('org.eclipse.jgit:org.eclipse.jgit') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'com.googlecode.javaewah' }}
                }
            }
            withModule('com.amazonaws:aws-java-sdk-core') {
                withVariant('default') {
                    withDependencies {
                        it.removeAll { it.name == 'jackson-dataformat-cbor' || it.group == 'commons-logging' }
                        it.findAll { it.name == 'httpclient' }.each { changeVersionInMetadata it, versions.httpclient }
                    }
                }
                withVariant('runtime') {
                    withDependencies {
                        it.removeAll { it.name == 'jackson-dataformat-cbor' || it.group == 'commons-logging' }
                        it.findAll { it.name == 'httpclient' }.each { changeVersionInMetadata it, versions.httpclient }
                    }
                }
            }
            withModule('com.google.code.findbugs:findbugs') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group != 'dom4j' }}
                }
            }
            withModule('org.apache.sshd:sshd-core') {
                withVariant('default') {
                    withDependencies {
                        it.findAll { it.group == 'org.slf4j' }.each {
                            changeVersionInMetadata it, '1.7.10'
                        }
                        add('org.apache.mina:mina-core:2.0.10') //is declared, but optional
                    }
                }
            }
            withModule('org.apache.mina:mina-core') {
                withVariant('default') {
                    withDependencies {
                        it.findAll { it.group == 'org.slf4j' }.each {
                            changeVersionInMetadata it, '1.7.10'
                        }
                    }
                }
                withVariant('runtime') {
                    withDependencies {
                        it.findAll { it.group == 'org.slf4j' }.each {
                            changeVersionInMetadata it, '1.7.10'
                        }
                    }
                }
            }
            withModule('org.spockframework:spock-core') {
                withVariant('default') {
                    withDependencies {
                        it.findAll { it.group == 'org.objenesis' }.each {
                            changeVersionInMetadata it, '1.2'
                        }
                    }
                }
            }
            withModule('org.testng:testng') {
                withVariant('default') {
                    withDependencies {
                        it.removeAll { it.name == 'bsh' }
                        add(libraries.bsh)
                    }
                }
            }
            withModule('jaxen:jaxen') {
                withVariant('default') {
                    withDependencies { it.removeAll { true } }
                }
            }
            if (currentProject.name != 'internalAndroidPerformanceTesting') {
                withModule('org.apache.httpcomponents:httpclient') {
                    withVariant('default') {
                        withDependencies {
                            it.removeAll { it.group == 'commons-logging' }
                            add(libraries.jcl_to_slf4j)
                            it.findAll { it.group == 'commons-codec' }.each { changeVersionInMetadata it, '1.6' }
                            it.findAll { it.name == 'httpcore' }.each { changeVersionInMetadata it, '4.4.4' }
                            add(libraries.jcifs)
                        }
                    }
                    withVariant('runtime') {
                        withDependencies {
                            it.removeAll { it.group == 'commons-logging' }
                            it.findAll { it.group == 'commons-codec' }.each { changeVersionInMetadata it, '1.6' }
                            it.findAll { it.name == 'httpcore' }.each { changeVersionInMetadata it, '4.4.4' }
                        }
                    }
                }
            }
        }
    }
}*/

/*
allprojects {
    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.name == 'asm') {
                details.useTarget(libraries.asm)
            } else if (details.requested.name == 'asm-util') {
                details.useTarget(libraries.asm_util)
            } else if (details.requested.name == 'asm-commons') {
                details.useTarget(libraries.asm_commons)
            } else if (details.requested.name == 'asm-tree') {
                details.useTarget(libraries.asm_tree)
            } else if (details.requested.group == 'cglib') {
                details.useTarget(libraries.cglib)
            } else if (details.requested.group == 'org.apache.ivy') {
                details.useTarget(libraries.ivy)
            } else if (details.requested.group == 'org.testng') {
                details.useTarget(libraries.testng)
            }
        }
    }
}
*/
